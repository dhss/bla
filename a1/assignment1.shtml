<!DOCTYPE html>
<html>
    <head>
        <meta name="generator" content="HTML Tidy for Mac OS X (vers 31 October 2006 - Apple Inc. build 15.18.1), see www.w3.org">
        <meta charset="UTF-8">
        <link rel="stylesheet" href="http://www.cdf.toronto.edu/~csc207h/fall/styles.css" type="text/css">
        <title>
            CSC207 &#8212; Assignment 1
        </title>
    </head>
    <body>
        <div class="title">
            <h1>
                Fall 2016 &#8212; Introduction to Software Design &#8212; Assignment 1
            </h1>
        </div>
        <p>
            <strong>Group size:</strong> Individual
        </p>
        <h2>
            Learning objectives
        </h2>
        <ul>
            <li>Use Git
            </li>
            <li>Use Eclipse to develop a full program
            </li>
            <li>
                <b>Use the Eclipse debugger</b> (this is bold because you're probably going to need it!)
            </li>
            <li>Understand the basics of Java's type system
            </li>
            <li>Work with the file system using Java
            </li>
            <li>Implement concepts from CSC148 (trees and recursion) in Java
            </li>
            <li>Prepare you for A2, A3, and A4 &#8212; the concepts and code in this assignment will feed directly into the rest of the assignment sequence.
            </li>
        </ul>
        <h2>
            Due dates
        </h2>
        <p>
            This assignment has two parts. We are extending the due date of Part 1 to <b>Friday 7 October at 11am</b>. We are extending the due date of Part 2 to <b>Friday 21 October at 11am</b>.
        </p>
        <h2>
            Overview
        </h2>
        <p>
            Part 1 has you practice working with Java in order to read the contents of a directory, as well as complete the code for a binary tree class.
        </p>
        <p>
            Part 2 has you use more advanced Java concepts in order to build a tree representation of a directory and its contents. You will write a program that can list the contents of any directory on your hard drive. You will represent the directory tree structure using a tree of nodes. <b>This part of the handout will appear in a few days, and we will send an announcement when you should run <code>git pull</code>.</b>
        </p>
        <h2>
            Getting set up
        </h2>
        <p>
            You should have checked out your repository in order to read this handout. Inside that repository is a directory called <code>a1</code>, and it contains this handout. It also contains two subdirectories: <code>part1</code> and <code>part2</code>. Each of those has a subdirectory called <code>src</code>. Inside the <code>src</code> directories are directories for the Java packages used by the starter code, as well as the starter code itself.
        </p>
        <h2>
            Part 1
        </h2>
        <h3>
            Setting up Eclipse
        </h3>
        <p>
            You will create an Eclipse project in the <code>a1/part1</code> directory. Here are the steps:
        </p>
        <ul>
            <li>Start Eclipse using the default workspace.
            </li>
            <li>Create a new Java project. In the New Java Project dialog, name your project anything you like, but <b>don't use the default location</b>. Instead, uncheck the <code>Use default location</code> checkbox, click the <code>Browse</code> button, and navigate to the <code>part1</code> directory in your repository. Create the project in <code>part1</code>. (This will create a <code>bin</code> directory that is used by Eclipse. You should not add this directory to your repository.)
            </li>
        </ul>
        <p>
            In <code>part1</code> are two Java packages, <code>directory_viewer</code> and <code>binary_tree</code>.
        </p>
        <h3>
            Printing the contents of a directory
        </h3>
        <p>
            In Eclipse, open and run file <code>directory_viewer/DirectoryReader.java</code>. You should be prompted for a directory, and when you select one, the full path to that directory should be printed.
        </p>
        <p>
            Now add code to method <code>main</code> to print the names of the files and directories inside the directory that is chosen, prefixed with a hyphen and a space. Print <code>/</code> after directory names. For example, if you select a directory <code>/u/users/pgries</code> that has a directory called <code>dir1</code> and two files called <code>f1.txt</code> and <code>f2.txt</code>, then this should be printed:
        </p>
        <pre>
/u/users/pgries
- dir1/
- f1.txt
- f2.txt
</pre>
        <p>
            To accomplish this, you are going to need to explore Java's <code>java.io</code> package, and in particular class <a target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/io/File.html"><code>java.io.File</code></a>.
        </p>
        <p>
            Push your changes.
        </p>
        <h3>
            Finishing a binary tree class
        </h3>
        <p>
            We have provided starter code for a binary tree application in file <code>BinaryTree.java</code>. Search for "TODO" to find the parts you will complete.
        </p>
        <p>
            When you are done, your code should print this:
        </p>
        <pre>
()
(A () ())
(A () (B () ()))
(A () (B (C () ()) ()))
(A (D () ()) (B (C () ()) ()))
</pre>
        <p>
            We will, of course, test with different trees.
        </p>
        <p>
            Push your changes.
        </p>
        <h2>
            Part 2: File System Exploration
        </h2>
        <p>
            The purpose of this part is to have you start to learn your way around the Java Graphical User Interface (GUI) components, as well as complete the implementation for an n-ary tree. (That's a tree where each node can have an arbitrary number of children.)
        </p>
        <p>
            We have added a subdirectory in your repository called <code>part2</code>. Set up a new Java project for it like you did for Part 1.
        </p>
        <h3>
            The basics of a Java GUI
        </h3>
        <p>
            The visual components used in Part 2 are:
        </p>
        <ul>
            <li>The application window (an instance of class <code>javax.swing.JFrame</code>)
            </li>
            <li>A button that the user clicks to choose a directory (an instance of class <code>javax.swing.JButton</code>)
            </li>
            <li>A file chooser that pops up when the button is clicked (an instance of class <code>javax.swing.JFileChooser</code>)
            </li>
            <li>A label to show the full path to the selected directory (an instance of class <code>javax.swing.JLabel</code>)
            </li>
            <li>A text area to show the nested contents of the selected directory (an instance of class <code>javax.swing.JTextArea</code>)
            </li>
            <li>A scroll pane to show the nested content, in case there are a lot of files (an instance of class <code>javax.swing.JScrollPane</code>)
            </li>
        </ul>
        <p>
            Note that all these classes are in package <code>javax.swing</code>; by convention, all of them start with the letter <code>J</code>.
        </p>
        <p>
            A <code>java.awt.Container</code> is a place where you can put visual components. The <code>JFrame</code> has a <code>Container</code>, and the rest of the visual components are inside that container. "AWT" stands for <em>Abstract Window Toolkit</em>. Java Swing was created because the AWT was unwieldy. A newer GUI framework called <a target="_blank" href="http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html">JavaFX</a> is becoming popular, but we are using Swing for this semester.
        </p>
        <p>
            Events such as mouse clicks are handled separately from the components themselves. An object that handles an event is called an <em>action listener</em>. Any class that is an action listener needs to implement interface <code>java.awt.event.ActionListener</code>, which means that the class needs to have a method called <code>actionPerformed</code>. Method <code>actionPerformed</code> gets called automagically when an event happens; you don't call it directly.
        </p>
        <p>
            To find out more, check out <a target="_blank" href="https://docs.oracle.com/javase/tutorial/uiswing/events/actionlistener.html">How to Write an Action Listener</a> and <a target="_blank" href="http://docs.oracle.com/javase/tutorial/uiswing/misc/action.html">How to Use Actions</a>.
        </p>
        <h3>
            The starter code
        </h3>
        <p>
            There are three classes and an enumeration in the starter code:
        </p>
        <ul>
            <li>
                <code>DirectoryExplorer</code>, which contains method <code>main</code>, and builds and displays the GUI.
            </li>
            <li>
                <code>FileNode</code>, which is a node in a tree that represents a file or directory, and a set of children. There are a couple of methods that you need to complete.
            </li>
            <li>
                <code>FileType</code> is an <em>enumeration</em>, which is a way to specify a set of values. There are one two values in <code>FileType</code>: <code>FILE</code> and <code>DIRECTORY</code>. This is used by <code>FileNode</code>.
            </li>
            <li>
                <code>FileChooserButtonListener</code>, which is the action listener for the button that has the user choose a directory. There are a couple of methods that you need to complete.
            </li>
        </ul>
        <p>
            Class <code>FileNode</code> keeps track of child nodes using a dictionary. The keys are <code>String</code>s representing the names of the child nodes and directories. The values are the <code>FileNode</code> objects representing those children. In Java, the dictionary type is called a <code><a target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html">Map</a>.</code> <code>Map</code> is a Java interface, and we suggest you use <code>HashMap</code> as the implementing class in your code.
        </p>
        <ul>
            <li>Given a <code>Map m</code>, to add a new key/value pair you would call <code>m.put(key, value)</code>, and to retrieve the value associated with a key you would call <code>m.get(key)</code>. These are equivalent to Python's <code>m[key] = value</code> and <code>m[key]</code>.
            </li>
            <li>To get the set of keys, you would call <code>m.keySet()</code>. To get the set of values, you would call <code>m.values()</code>.
            </li>
            <li>To create a new map, you should use <code>new HashMap&lt;String, FileNode&gt;()</code>, which specifies that the map keys must be <code>String</code>s and the values must be <code>FileNode</code>s.
            </li>
        </ul>
        <h3>
            What to do
        </h3>
        <ul>
            <li>Try running the application. The whole application is functional, aside from the incomplete methods. When you choose a directory, we have put fake output in the text area. You'll need to fix that.
            </li>
            <li>Read through class <code>DirectoryExplorer</code> to see how we assemble the window and its contents. We make each separate component, and then add it to the window's container. You don't need to change anything in this class, but you'll need to understand (most of) it for the later assignments.
            </li>
            <li>Read <code>FileType.java</code>. It only exists to give us constants <code>FileType.FILE</code> and <code>FileType.DIRECTORY</code>.
            </li>
            <li>Read through <code>FileNode</code>, including the Javadoc describing the instance variables. Notice that the constructor is incomplete. Look at each of the methods we provide &#8212; most of them are setters and getters. Look in particular at function <code>isDirectory</code>, which shows how to use the enumeration. Note also that we have provided a method <code>main</code> that you can use to test your code &#8212; add to it as you work on this class!
                <ul>
                    <li>Complete the constructor and test what you did in method <code>main</code>.
                    </li>
                    <li>In method <code>main</code>, build a tree with a few nodes, then call <code>findChild</code> for each of the names. They will fail. Complete method <code>findChild</code> until your tests pass.
                    </li>
                </ul>
            </li>
            <li>Read through <code>FileChooserButtonListener.java</code>. There are two incomplete methods: <code>buildTree</code> and <code>buildDirectoryContents</code>. Both are called by method <code>actionPerformed</code>. Complete method <code>buildTree</code> first, and then <code>buildDirectoryContents</code>.
                <ul>
                    <li>
                        <code>buildTree</code> will recursively traverse the selected directory.
                    </li>
                    <li>
                        <p>
                            <code>buildDirectoryContents</code> will recursively append to a <code>StringBuffer</code>, which is like a mutable <code>String</code>, and is the standard class to use. If you were to directly use <code>String</code>s, you would create dozens or hundreds of temporary strings, which should be avoided for performance reasons. To append a <code>String</code> to the <code>StringBuffer</code>, call method <code>append</code>. Note that as you recurse you'll need to build up the prefix.
                        </p>
                        <p>
                            As an example, if a directory <code>my_dir</code> contains a filed called <code>a_file.txt</code> and a directory called <code>sub_dir</code>, and <code>sub_dir</code> contains two files called <code>f1.txt</code> and <code>f2.txt</code>, then the output might look like this (although, depending on how you build your program, <code>a_file.txt</code> might appear above <code>sub_dir</code>):
                        </p>
                        <pre>
my_dir
--sub_dir
----f1.txt
----f2.txt
--a_file.txt
</pre>
                    </li>
                </ul>
            </li>
        </ul>
    </body>
</html>
